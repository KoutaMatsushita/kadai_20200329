plugins {
    id("org.jetbrains.kotlin.jvm") version "1.4.31"
    id("org.jetbrains.kotlin.kapt") version "1.4.31"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.4.31"
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.4.2"
    id("nu.studer.jooq") version "5.2.1"
    id("org.flywaydb.flyway") version "7.2.1"
}

version = "0.1"
group = "dev.mk2481"

repositories {
    mavenCentral()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("dev.mk2481.*")
    }
}

allOpen {
    annotations(
            "io.micronaut.aop.Around",
            "io.micronaut.http.annotation.Controller",
            "javax.inject.Singleton"
    )
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    runtimeOnly("org.postgresql:postgresql")
    jooqGenerator("org.postgresql:postgresql:42.2.14")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")
    testImplementation("com.github.database-rider:rider-core:1.23.0")
    testImplementation("com.github.database-rider:rider-junit5:1.23.0")
    testImplementation("org.assertj:assertj-core:3.19.0")
    testImplementation("io.mockk:mockk:1.10.6")
}


application {
    mainClass.set("dev.mk2481.kadai20200329.ApplicationKt")
}
java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

sourceSets {
    main.java.srcDirs += "src/main/java"
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
}

flyway {
    driver = "org.postgresql.Driver"
    url = System.getenv("JDBC_DATABASE_URL")
    user = System.getenv("DATABASE_USER")
    password = System.getenv("DATABASE_PASSWORD")
    schemas = ["public"]
    locations = ["filesystem:src/main/resources/db/migration"]
}

jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.INFO
                jdbc {
                    driver = "org.postgresql.Driver"
                    url = System.getenv("JDBC_DATABASE_URL")
                    user = System.getenv("DATABASE_USER")
                    password = System.getenv("DATABASE_PASSWORD")
                }
                generator {
                    name = "org.jooq.codegen.DefaultGenerator"
                    database {
                        name = "org.jooq.meta.postgres.PostgresDatabase"
                        inputSchema = "public"
                        includes = ".*"
                        excludes = "flyway_schema_history"
                    }
                    strategy.name = "org.jooq.codegen.example.JPrefixGeneratorStrategy"
                    generate {
                        deprecated = false
                        nullableAnnotation = true
                        nonnullAnnotation = true
                        immutablePojos = true
                    }
                    target {
                        packageName = "dev.mk2481.kadai20200329.db"
                        directory = "src/main/java/generated/jooq"
                    }
                }
            }
        }
    }
}

// jooq コード生成前にマイグレーションを行う。
// see: https://github.com/etiennestuder/gradle-jooq-plugin/blob/master/example/configure_jooq_with_flyway/build.gradle
tasks.named('generateJooq').configure {
    dependsOn tasks.named('flywayMigrate')
    inputs.files(fileTree('src/main/resources/db/migration'))
            .withPropertyName('migrations')
            .withPathSensitivity(PathSensitivity.RELATIVE)
    allInputsDeclared = true
    outputs.cacheIf { true }
}
